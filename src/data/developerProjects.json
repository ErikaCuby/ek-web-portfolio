[
{
  "id": "portfolio-site",
  "name": "My Web Portfolio",
  "slug": "portfolio",
  "thumbnail": "/images/thumbnails/portfolio-thumb.jpg",
  "video": "/videos/portfolio-walkthrough.mp4",
  "cliffhanger": "Two identities. One portfolio. And a developer whoâ€™s both the builder and the chaos.",
  "caseStudy": {
    "title": "How I Designed, Debugged, and Debugged Again",
    "date": "April 2025",
    "image": "/images/portfolio-case-study.jpg",
    "sections": [
      {
        "heading": "The Idea",
        "content": [
          "I wanted my portfolio to feel like *me* â€” not just a showcase of code, but an experience. I wasnâ€™t building a resume; I was building a living space for two identities: Erika the front-end dev and Erika the illustrator.",
          "Both sides needed their own vibe, their own voice, and their own entrance. Thatâ€™s how the idea of a split identity site was born â€” with a landing page that lets users choose which Erika they want to meet."
        ]
      },
      {
        "heading": "The Build",
        "content": [
          "I chose React with Vite for performance and flexibility. Routing? React Router. Styling? Custom CSS, because Tailwind and I have creative differences.",
          "I structured everything with reusable components and shared variables for colors, typography, shadows, and spacing â€” the goal was cohesion without sacrificing personality."
        ]
      },
      {
        "heading": "The Struggles",
        "content": [
          "State vs. sanity: toggling themes, routing animations, conditional rendering. My brain was a multi-tabbed mess.",
          "CSS scope: balancing what belongs in index.css and what deserves a module â€” I restructured that mess at least three times.",
          "Dynamic galleries with JSON-powered routing and stylingâ€¦ sounded easy, wasnâ€™t.",
          "Netlify image-case bugs. A rite of passage.",
          "And of course: keeping the developer and illustrator halves consistent *without* making them boring clones of each other."
        ]
      },
      {
        "heading": "The Thought Process",
        "content": [
          "My brain works in dualities â€” logical and expressive, clean and chaotic. This portfolio is built to reflect that.",
          "Every section is mapped like a journey: You land â†’ You choose your Erika â†’ You explore â†’ You connect.",
          "Instead of a single long scroll, I opted for clean page routes â€” like a devâ€™s toolbox, but wrapped in soft tones and self-aware design."
        ]
      },
      {
        "heading": "What Iâ€™m Proud Of",
        "content": [
          "The landing experience â€” picking your Erika with a circle feels like a mood-based adventure.",
          "Dynamic project pages powered by JSON and styled through shared CSS (yes, finally clean and scalable).",
          "A gallery that lets me add or remove projects without touching the layout logic.",
          "Using only what I *need* â€” no bloated libraries, just custom, focused code.",
          "And honestly? That it feels like mine â€” not a template, not a starter kit. Itâ€™s personal."
        ]
      },
      {
        "heading": "What Tried to Kill Me",
        "content": [
          "Uppercase image file names and Netlify being dramatic about them.",
          "Naming conventions in shared vs. scoped CSS. It's like arguing with yourself.",
          "Conditionally rendering layout logic based on dev vs. art sections â€” clean in theory, messy in practice."
        ]
      },
      {
        "heading": "What Iâ€™d Do Differently",
        "content": [
          "Start with a CMS or markdown setup for case studies. That giant JS object won't age well.",
          "Decide on CSS structure earlier. Refactoring mid-way? Pain.",
          "Maybe â€” maybe â€” try Tailwind for the utility class joyride (but only if I'm feeling brave)."
        ]
      },
      {
        "heading": "Links",
        "content": [
          "ðŸ”— Live Site: https://erikacuby-portfolio.netlify.app",
          "ðŸ’» GitHub Repo: https://github.com/ErikaCuby/ek-web-portfolio"
        ]
      }
    ]
  }
},
  {
    "id": "roast-blog-react",
    "name": "The Roast Blog",
    "slug": "roast-blog",
    "thumbnail": "/images/thumbnails/roast-blog-thumb.jpg",
    "video": "/videos/roast-blog-walkthrough.mp4",
    "cliffhanger": "An AI that roasts you, a blog that never stays quiet\u2014what could go wrong?",
    "caseStudy": {
      "title": "The Roast Blog: How I Built It, Broke It, and Survived",
      "date": "April 2025",
      "image": "/images/roast-case-study.jpg",
      "sections": [
        {
          "heading": "How It Started",
          "content": [
            "I wanted to make a blog. Not just any blog\u2014a chatty, click-happy, chaos-fueled space where my AI (Luma) roasts me like a burnt croissant and somehow people are supposed to enjoy it. Cute, right?",
            "It began with a sketch, a palette, and way too much confidence. Next thing I knew, I was battling React components at midnight and wondering if Netlify was ghosting me on purpose."
          ]
        },
        {
          "heading": "Why I Chose React",
          "content": [
            "Because I enjoy suffering efficiently.",
            "Reusable components so I don't copy-paste like it\u2019s 2010.",
            "Smooth routing with no full-page reloads.",
            "Built-in support for fancy animations and future chaos.",
            "React gave me all that. It also gave me 19 new tabs of Stack Overflow and a mild case of imposter syndrome."
          ]
        },
        {
          "heading": "Styling It Like I Meant It",
          "content": [
            "I used custom CSS because I like control and making my life harder in beautiful ways. Light mode uses soft pinks and warm whites. Dark mode flips into purples and moody tones.",
            "Fonts? Playfair Display for drama. Work Sans for clarity. Hover effects? Handmade like small digital pastries."
          ]
        },
        {
          "heading": "The Build (aka, Erika vs. the Bugs)",
          "content": [
            "Phase 1: Everything was working. Until it wasn\u2019t.",
            "Phase 2: Netlify gave me a blank screen because of an uppercase image name.",
            "Phase 3: React Router tested me. I passed. Barely.",
            "Phase 4: I styled the 'Show More' button like it was auditioning for a skincare commercial."
          ]
        },
        {
          "heading": "What I\u2019m Proud Of",
          "content": [
            "Dark/light mode toggle that feels like flipping moods.",
            "A related-posts carousel with a smooth infinite loop.",
            "Meta tag updates for each blog post (SEO gets love too).",
            "A custom 404 page where my AI melts down instead of me."
          ]
        },
        {
          "heading": "What Tried to Kill Me",
          "content": [
            "Responsive CSS across devices (still haunts my dreams).",
            "Netlify playing hot-and-cold with every deploy.",
            "Random routing bugs that only appear during demos."
          ]
        },
        {
          "heading": "What I\u2019d Do Differently (Now That I\u2019m Wiser)",
          "content": [
            "Use Markdown or a CMS instead of one giant JS file.",
            "Set up preview builds before pushing to Netlify.",
            "Maybe... maybe try Tailwind (if I ever feel brave)."
          ]
        },
        {
          "heading": "Links",
          "content": [
            "\ud83d\udd17 Live Site: https://roast-blog-live.netlify.app",
            "\ud83d\udcbb GitHub Repo: https://github.com/ErikaCuby/the-roast-blog-react"
          ]
        }
      ]
    }
  },
  {
    "id": "react-dictionary",
    "name": "React Dictionary",
    "slug": "react-dictionary",
    "thumbnail": "/images/thumbnails/react-dictionary-thumb.jpg",
    "video": "/videos/react-dictionary-demo.mp4",
    "cliffhanger": "A dictionary app that speaks and shows you picturesâ€”because reading definitions is so last season.",
    "caseStudy": {
      "title": "React Dictionary: The App That Talks Back",
      "date": "April 2025",
      "image": "/images/react-dictionary-case-study.jpg",
      "sections": [
        {
          "heading": "The Spark",
          "content": [
            "I thought, 'Why not build a dictionary app?' Simple, right? Just fetch a word and display its meaning. But then I thought, 'Let's make it talk and show pictures too!' Because who doesn't want a dictionary that does everything except make coffee?"
          ]
        },
        {
          "heading": "The Build",
          "content": [
            "Started with Reactâ€”because I love componentizing my life. Added Axios for API calls, and styled it with CSS to make it look less like a 90s website.",
            "Integrated two APIs: one for definitions and another for images. Because text is boring without visuals, and I like to complicate things."
          ]
        },
        {
          "heading": "The Struggles",
          "content": [
            "CORS errors: the internet's way of saying 'You shall not pass!'",
            "Handling undefined responses when the API decided a word wasn't worthy of a definition.",
            "Making the app responsive so it doesn't break on every screen size known to humanity."
          ]
        },
        {
          "heading": "What I'm Proud Of",
          "content": [
            "Successfully integrated two APIs without the app crashing every five seconds.",
            "Clean UI that doesn't make your eyes bleed.",
            "A search feature that actually worksâ€”and fast!"
          ]
        },
        {
          "heading": "What Tried to Kill Me",
          "content": [
            "API rate limits: because apparently, free doesn't mean unlimited.",
            "Debugging asynchronous calls that refused to behave.",
            "Styling the audio player to not look like it time-traveled from 2005."
          ]
        },
        {
          "heading": "What I'd Do Differently",
          "content": [
            "Add a loading spinner so users know the app hasn't died.",
            "Implement error messages that are actually helpful.",
            "Maybe use TypeScript to catch bugs before they catch me."
          ]
        },
        {
          "heading": "Links",
          "content": [
            "ðŸ”— Live Site: https://lexicone.netlify.app",
            "ðŸ’» GitHub Repo: https://github.com/ErikaCuby/react-dictionary"
          ]
        }
      ]
    }
  }
]
