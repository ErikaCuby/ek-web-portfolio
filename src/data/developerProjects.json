[
  {
    "id": "portfolio-site",
    "name": "My Web Portfolio",
    "slug": "portfolio",
    "thumbnail": "/images/thumbnails/portfolio-thumb.jpg",
    "video": "/videos/portfolio-walkthrough.mp4",
    "cliffhanger": "Two identities. One portfolio. And a developer who’s both the builder and the chaos.",
    "caseStudy": {
      "title": "How I Designed, Debugged, and Debugged Again",
      "date": "April 2025",
      "heroImage": "/images/portfolio-case-study.jpg",
      "sections": [
        {
          "type": "imageText",
          "heading": "The Idea",
          "layout": "image-left",
          "image": "/images/case/idea-sketch.jpg",
          "content": [
            "I wanted my portfolio to feel like *me* — not just a showcase of code, but an experience.",
            "Both sides needed their own vibe, their own voice, and their own entrance. That’s how the idea of a split identity site was born."
          ]
        },
        {
          "type": "gallery",
          "heading": "The Build",
          "images": [
            {
              "src": "/images/case/build-1.png",
              "caption": "Landing page with animated circle buttons."
            },
            {
              "src": "/images/case/build-2.png",
              "caption": "Shared navbar using CSS variables."
            }
          ],
          "content": [
            "React with Vite gave me speed. Routing? React Router. Styling? All mine.",
            "I created reusable components and centralized design tokens in `variables.css`."
          ]
        },
        {
          "type": "imageText",
          "heading": "The Struggles",
          "layout": "image-right",
          "image": "/images/case/struggles-code.png",
          "content": [
            "Theme toggles broke everything for a day. Routing transitions haunted my sleep.",
            "Scope wars between index.css and CSS modules? Brutal.",
            "And the JSON gallery? Not as friendly as it sounds."
          ]
        },
        {
          "type": "features",
          "heading": "Notable Features",
          "items": [
            "Dual-identity animated landing",
            "JSON-powered dynamic gallery",
            "CSS variable-based theme system",
            "Responsive layout with grid/flex harmony"
          ]
        },
        {
          "type": "reflection",
          "heading": "Final Thoughts",
          "content": [
            "This portfolio taught me a lot about building with intention and personality. It’s not just a showcase, it’s an invitation to explore who I am as a creator."
          ]
        }
      ]
    }
  },
{
  "id": "roast-blog",
  "name": "The Luma & Erika Roast Blog",
  "slug": "roast-blog",
  "thumbnail": "/images/thumbnails/roast-blog-thumb.jpg",
  "video": "/videos/roast-blog-scroll.mp4",
  "cliffhanger": "An interactive blog where I get publicly roasted by an AI I coded myself. Learning React was never this personal.",
  "caseStudy": {
    "title": "How I Built a Blog That Roasts Me Back",
    "date": "March 2025",
    "heroImage": "/images/case/roast-hero.png",
    "sections": [
      {
        "type": "imageText",
        "heading": "Why I Built This",
        "layout": "image-left",
        "image": "/images/case/roast-blog-home.png",
        "content": [
          "I didn’t want another boring portfolio with placeholder lorem ipsum and vanilla cards. I wanted something weird, real, and slightly chaotic — like me.",
          "So I built a blog powered by React, where an AI called Luma roasts me while I write code, reflect on life, and attempt to stay caffeinated. This was my first real React project where I went beyond tutorials into ‘oh wow this is hard’ territory."
        ]
      },
      {
        "type": "gallery",
        "heading": "What It Does",
        "images": [
          {
            "src": "/images/case/roast-post-1.png",
            "caption": "Dynamic post layout with illustration, commentary, and my wounded dignity."
          },
          {
            "src": "/images/case/roast-post-2.png",
            "caption": "Luma’s Notes panel that floats, collapses, and occasionally insults me."
          }
        ],
        "content": [
          "Each blog post is loaded dynamically from JSON. Posts are structured with headlines, illustrations, my commentary, and Luma’s ever-present sass.",
          "There’s a ‘Show More’ button, a collapsible floating sidebar, and randomized quotes that react to the page you’re on. Yes, it’s dramatic. Yes, it’s responsive."
        ]
      },
      {
        "type": "imageText",
        "heading": "Dev Process (aka: crying over useEffect)",
        "layout": "image-right",
        "image": "/images/case/dev-struggles.png",
        "content": [
          "I built everything using React (no Vite), styled with custom CSS based on my soft beige/dusty pink color palette.",
          "Routing was handled with React Router. I used Framer Motion for animations, FontAwesome for icons, and wrote every bit of layout and logic by hand.",
          "The randomized, non-repeating Luma quotes? That logic came from my brain — Luma just wrote the actual code. I had the vision, she had the keyboard. That’s teamwork (or emotional damage)."
        ]
      },
      {
        "type": "features",
        "heading": "Features",
        "items": [
          "Dynamic blog post rendering from JSON",
          "Route-aware Luma quotes (changes depending on page)",
          "Show More button to expand post commentary",
          "Floating Luma’s Notes sidebar (collapsible & reactive)",
          "Responsive layout for all screen sizes",
          "Framer Motion animations",
          "Randomized, non-repeating AI quote system"
        ]
      },
      {
        "type": "imageText",
        "heading": "Deploying to Netlify (aka: digital betrayal)",
        "layout": "image-left",
        "image": "/images/case/netlify-fail.png",
        "content": [
          "Netlify build failures became my personal villain arc. ESLint and CI=true errors took me down more than once.",
          "Every deploy was like rolling a dice. One missing dependency or a forgotten quote bracket, and the whole thing imploded.",
          "I fixed it all eventually by refactoring state logic, rewriting parts of the quote system, and breathing deeply through the pain."
        ]
      },
      {
        "type": "reflection",
        "heading": "Final Thoughts",
        "content": [
          "This project wasn’t just about React — it was about building something that felt like me: funny, introspective, kind of roasted, and maybe a little too beige.",
          "I learned more about frontend logic, routing, and debugging than I ever expected — and I’m proud I stuck with it even when Luma got snarky and Netlify betrayed me.",
          "If you’re reading this and you’ve ever cried over a hook dependency warning: solidarity, friend. We’re doing great."
        ]
      }
    ]
  }
}


,
  {
    "id": "dictionary-app",
    "name": "React Dictionary App",
    "slug": "dictionary-app",
    "thumbnail": "/images/thumbnails/dictionary-thumb.jpg",
    "video": null,
    "cliffhanger": "Built a dictionary using React. Now I finally know what 'asynchronous' means — and how to scream into a console.",
    "caseStudy": {
      "title": "My First API Project: A Dictionary That Didn’t Laugh at My Typos",
      "date": "January 2024",
      "heroImage": "/images/case/dictionary-hero.png",
      "sections": [
        {
          "type": "imageText",
          "heading": "Why I Built This",
          "layout": "image-left",
          "image": "/images/case/dictionary-search.png",
          "content": [
            "This was my first React project using a real external API, and I wanted to build something small but useful — a dictionary sounded perfect.",
            "Also: I kept googling things like 'polymorphism' and figured it was time to have a dedicated place to look smart while learning."
          ]
        },
        {
          "type": "gallery",
          "heading": "What It Does",
          "images": [
            {
              "src": "/images/case/dictionary-home.png",
              "caption": "Simple UI for word lookup using the Dictionary API."
            },
            {
              "src": "/images/case/dictionary-error.png",
              "caption": "If your word doesn’t exist, the app lets you down gently."
            }
          ],
          "content": [
            "You can search any word, and it will fetch definitions, examples, and part of speech. All data comes from a public Dictionary API.",
            "If you enter nonsense or typo something (which I did a lot), the app shows a clean error message instead of breaking."
          ]
        },
        {
          "type": "imageText",
          "heading": "What I Learned",
          "layout": "image-right",
          "image": "/images/case/dictionary-react.png",
          "content": [
            "I learned the basics of working with `fetch()` and handling asynchronous data in React.",
            "Also discovered the joy of conditional rendering — especially when the API fails or returns nothing.",
            "Let’s just say this project taught me how to console.log like a champ."
          ]
        },
        {
          "type": "features",
          "heading": "Features",
          "items": [
            "Word lookup using public Dictionary API",
            "Multiple definitions per word",
            "Basic error handling",
            "Responsive UI (mobile-friendly)",
            "Clean layout with minimalist styling",
            "Built entirely with React and custom CSS"
          ]
        },
        {
          "type": "reflection",
          "heading": "Final Thoughts",
          "content": [
            "It might be a small app, but it helped me understand the full cycle of making an actual working frontend — from idea, to API, to deployment.",
            "This was one of the first projects that made me feel like a real developer — even if the words were smarter than me."
          ]
        }
      ]
    }
  }

]
